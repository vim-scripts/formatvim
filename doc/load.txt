*load.txt*    Utility used for loading other plugins
=============================================================================
CONTENTS                                                     *load-contents*

    1. Intro                                      |load-intro|
    2. Functionality provided                     |load-functionality|
        2.1. Commands                             |load-commands|
        2.2. Functions                            |load-functions|
        2.3. Plugin registration                  |load-reg|

=============================================================================
1. Intro                                                        *load-intro*

This plugin provides the ability to autoload other plugins on demand, create 
global functions and commands and share plugin's functionality.

Features:
    ∙ Autoloading plugins on |FuncUndefined| event.
    ∙ Autoloading plugins when their command is called.
    ∙ Autoloading plugins when their functionality is required.
    ∙ Displaying plugins' status.
    ∙ Unloading and reloading plugins.
    ∙ Searching for a function number through registered plugins.

This plugin requires chk plugin.

=============================================================================
2. Functionality provided                               *load-functionality*

This plugin provides one command and one function. Both command and function 
names start with Load, but this prefix can be altered by FuncPrefix and 
CmdPrefix options in g:loadOptions dictionary (Note that it is a very bad 
idea).

-----------------------------------------------------------------------------
2.1. Commands                                                *load-commands*
                                                              *load-actions*

:LoadCommand {action} ...                     *load-:Command* *:LoadCommand*
            The only command provided by this plugin. If variable 
            g:loadOptions exists and has key CmdPrefix, then prefix Load is 
            altered.
:LoadCommand unload {plugin}                            *load-action-unload*
            Unload plugin named {plugin}.
            Unloading is done in the following order:
            1. |load-reg-f|.main.destruct function is called. See |load-reg-F| 
               for details.
            2. Unlocking |load-reg-g| and |load-reg-F| variables.
            3. Deleting all keys in {plugdict}.g and {plugdict}.F.
            4. Unregistering plugin. See |load-func-unreg|.
:LoadCommand reload {plugin}                            *load-action-reload*
            Reload plugin named {plugin}. Just like |load-action-unload|, but 
            after unloading |load-reg-file| is sourced.
:LoadCommand show                                         *load-action-show*
            Show |load-reg-scriptid|, |load-reg-name|, |load-reg-file| and 
            status for all plugins. Possible statuses: registered and loaded. 
            See |load-reg| for details.
:LoadCommand findnr {nr}                                *load-action-findnr*
            Find a function with number {nr}. Function is searched through
            |load-reg-F| variables of plugins.
:LoadCommand nrof {fname}                                 *load-action-nrof*
            Display a number of function {fname}. {fname} must have the 
            following structure: /{plugname}/{pathToFunction}.

-----------------------------------------------------------------------------
2.2. Functions                                              *load-functions*
                                   *load-func-LoadFuncdict* *LoadFuncdict()*
This plugin provides only one global function: LoadFuncdict (prefix Load may 
be altered, but this is a very bad idea). This function returns a dictionary 
with the following keys (each value is a function reference):

                                                  *load-func-registerplugin*
registerplugin({dictfunctions}, {defaultFuncPrefix}, {defaultCmdPrefix},
               {optionPrefix}, {functionDictionary}, {globalDictionary}, 
               {commands}, {functions}, {scriptid}, {scriptfile}, {oneload})
            Register plugin. For the meaning of the arguments see |load-reg|. 
            Returns a dictionary with following keys:
            Key        Value ~
            name       Name of the plugin. Now it is the filename without path 
                       and extension
            functions  Some useful functions:
                       eerror({srcname}, {etype}, {arg1}, ...)
                            Display the error message with pattern
                                {plugname}/{srcname}:{etypestr}({msgs})
                            Here {plugname} stands for plugin name (see the 
                            `name' key above), {srcname} is a string provided 
                            as the first argument, {etypestr} is a string 
                            obtained from {globalDictionary}.etype[{etype}] 
                            (or empty string if it does not exist) and {argN} 
                            are handled in following way:
                            1. If {arg1} (only {arg1}, not {argN}) is 
                               a non-zero number then throw error message 
                               after echoing it.
                            2. If {argN} is a list, its first value is 
                               a string and exists 
                               {globalDictionary}.emsg[{argN}[0]], then add 
                               printf({globalDictionary}.emsg[{argN}[0]], 
                               {argN}[1], {argN}[2], ...) to {msgs}.
                            3. In other cases add {argN} to {msgs}.
                            String {msgs} is a list of strings separated by
                            ": ".
                        option({optname})
                            Try getting option named {optname} first from 
                            b:{optionPrefix}Options, then from 
                            g:{optionPrefix}Options and finally from 
                            {globalDictionary}.defaultOptions. Throw an 
                            exception on failure. If exists 
                            {globalDictionary}.c.options[{optname}], then use 
                            it to check obtained option by function 
                            |chk-func-checkargument|. Throw an exception if 
                            check failed.

unregister(plugname)                                  *load-func-unregister*
        Unregister plugin. For {plugname} argument see |load-reg-name|. 
        “Unregister” means:
        1. delete all global functions;
        2. delete all commands;
        3. remove plugin dictionary.

getfunctions(plugname)                              *load-func-getfunctions*
        Get the dictionary functions listed in |load-reg-dictfunctions| 
        argument provided when plugin {plugname} was registered. For 
        {plugname} argument see |load-reg-name|.

-----------------------------------------------------------------------------
2.3. Plugin registration                                          *load-reg*

Registration is done via calling |load-func-register| function with the 
following arguments:
                                                    *load-reg-dictfunctions*
{dictfunctions} :: [({dictname}, {internalname}, {check})]
        List of lists of three items:
        {dictiname}    any string, which will be the function name in the
                       dictionary returned by |load-func-getfunctions|.
        {internalname} string, which consist of alphanumeric characters,
                       underscores and dots, where dot does neither start nor 
                       end the string. Dictionary function with name 
                       |load-reg-F|.{internalname} must exist.
        {check}        Argument check for a function or an empty dictionary if
                       no check is required. See |chk-func-checkarguments| for 
                       more details.
{defaultFuncPrefix} :: String                   *load-reg-defaultFuncPrefix*
        String which starts either with g: or with uppercase latin letter and 
        contains any number of latin letters, digits and underscores. It is 
        the default function prefix for plugin being registered.
{defaultCmdPrefix} :: String                     *load-reg-defaultCmdPrefix*
        String which starts with uppercase latin letter and contains any 
        number of latin letters, digits and underscores. It is the default 
        command prefix for plugin being registered.
{optionPrefix} :: String                             *load-reg-optionPrefix*
        String, which contains any number of latin letters, digits and 
        underscores. It is used to construct option dictionary name 
        (g:{optionPrefix}Options), which is used to get custom command (from 
        g:{optionPrefix}Options.CmdPrefix) and function (from 
        g:{optionPrefix}Options.FuncPrefix) prefixes.
                                                                *load-reg-F*
{functionDictionary} :: Dictionary             *load-reg-functionDictionary*
        Dictionary with plugin functions. The load plugin assumes that all 
        functions are declared as dictionary functions inside this 
        dictionary.
                                                                *load-reg-g*
{globalDictionary} :: Dictionary                 *load-reg-globalDictionary*
        Dictionary with global script variables. The load plugin assumes that 
        this dictionary is the only s: variable declared in the plugin.
{commands} :: Dictionary                                 *load-reg-commands*
        Dictionary {{CmdTail}: {Arguments}}, where arguments is a dictionary 
        with the following keys:
        Key       Value ~
        func      string, which consist of alphanumeric characters,
                  underscores and dots, where dot does neither start nor end 
                  the string. Dictionary function with name 
                  |load-reg-F|.{internalname} must exist. This function is 
                  called when the command {CmdPrefix}{CmdTail} is run. 
                  Arguments of the function (depending on other keys, some of 
                  them may not be present):
                  '<bang>', '<reg>', <LINE1>, <LINE2>, <count>, <f-args>.
        nargs     “+”, “?”, “*”, “0”, natural number or an empty string.
                  See |:command-nargs|. Adds <f-args> to the function 
                  arguments.
        range     “%”, non-negative number or an empty string.
                  See |:command-range|. Adds <LINE1> and <LINE2> to function 
                  arguments.
        count     Non-negative number or an empty string.
                  See |:command-count|. Adds <count> to function arguments.
        bang      Emty string. See |:command-bang|.
                  Adds '<bang>' to function arguments.
        bar       Emty string. See |:command-bar|.
        reg       Emty string. See |:command-register|.
                  Adds '<reg>' to function arguments.
        complete  Non-empty string. See |:command-complete| for possible
                  values. Note that for custom completion function it must be 
                  equal either to custom=s:{FunctionName} or 
                  customlist=s:{FunctionName}. In both cases 
                  |load-reg-F|.{FunctionName} function must exist because it 
                  will be silently (see |:silent|) called instead of 
                  s:{FunctionName}.
                                                        *load-reg-functions*
{functions} :: [({functiontail}, {internalname}, {check})]
        List of lists of three items:
        {functiontail} string, which consist of any number of latin letters,
                       digits and underscores. It is used to construct plugin 
                       global function's name ({FuncPrefix}{functiontail}).
        {internalname} string, which consist of alphanumeric characters,
                       underscores and dots, where dot does neither start nor 
                       end the string. Dictionary function with name 
                       |load-reg-F|.{internalname} must exist.
        {check}        Argument check for a function or an empty dictionary if
                       no check is required. See |chk-func-checkarguments| for 
                       more details.
        This option is used to construct plugin's global functions.
{scriptid} :: String                                     *load-reg-scriptid*
        The script id obtained by s:SID function called in the plugin. See 
        |<SID>| for more details.
                                                             *load-reg-name*
{scriptfile} :: String                                 *load-reg-scriptfile*
        The script filename. It is used to autoload plugin and also to get 
        a plugin name using fnamemodify(a:scriptfile, ":t:r") (filename 
        without extension and path).
{oneload} :: Bool                                         *load-reg-oneload*
        Defines whether plugin needs to be autoloaded (defines whether plugin 
        file needs to be sourced twice before plugin is actually ready to 
        work).

vim: ft=help:tw=78
