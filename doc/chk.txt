*chk.txt*  Utility used to check arguments of commands and functions
==============================================================================
CONTENTS                                                      *chk-contents*

    1. Intro                                      |chk-intro|
    2. Functionality provided                     |chk-functionality|
        2.1. Functions                            |chk-functions|
        2.2. Checks                               |chk-check|
        2.3. Models                               |chk-model|
        2.4. Transformations                      |chk-trans|

==============================================================================
1. Intro                                                         *chk-intro*

This plugin provides the ability to load JSON encoded data from files and dump 
Vim variables to files. Data loaded is cached in order to speed up the 
plugin.

Plugin requires chk, stuf and load plugins. It is also recommended having Vim 
compiled with |+python| feature. In order to load JSON files using Python you 
should install demchk plugin. Note that vimscript alternative to 
Python+demchk is too slow and does not support surrogate pairs.

==============================================================================
2. Functionality provided                                *chk-functionality*

This plugin provides two functions. Functions are accessed via dictionary 
returned by |load-func-getfunctions| function.

------------------------------------------------------------------------------
2.1. Functions                                               *chk-functions*

                                                    *chk-func-checkargument*
checkargument({check}, {argument}) :: Check -> a -> Bool
        Checks data {argument} using check {check}. For possible {check} 
        arguments see |chk-check|
                                                   *chk-func-checkarguments*
checkarguments({model}, {arguments}) :: Model -> [a] -> Bool
        Checks argument list {arguments} (it must be a single list!) using 
        model {model}. For possible {model} arguments see |chk-model|.

------------------------------------------------------------------------------
2.2. Checks                                                     *chk-checks*

All checks are lists of three or two elements. First element is the name of 
a check. Second is an argument of the check. Third is optional and it contains 
the error message displayed when the check fails.

Check name  Check argument and description ~
                                                              *chk-check-in*
in          [a] (any list)
            Checks whether {argument} is in list {checkargument}.
                                                           *chk-check-regex*
regex       Regex (correct regular expression)
            Checks whether {argument} is a string and matches regular 
            expression {checkargument}.
                                                            *chk-check-func*
func        (a -> Bool) (any function that takes {argument} and
                         returns 1 or 0)
            Checks, whether function being supplied by {argument} as an 
            {argument} returns true.
                                                            *chk-check-type*
type        Int (any integer from 0 to 5)
            Checks, whether type of {argument} is {checkargument}.
                                                            *chk-check-bool*
bool        _ (argument is ignored)
            Checks, whether {argument} is either 0 or 1.
                                                            *chk-check-eval*
eval        String (any correct expression)
            Checks, whether eval({checkargument}) is true. Inside this check 
            a:Arg is set to {argument}.
                                                           *chk-check-keyof*
keyof       Dictionary
            Checks, whether {argument} is a key of {checkargument}. {argument} 
            must be of a type String.
                                                            *chk-check-hkey*
hkey        String
            Checks, whether {argument} is a Dictionary and has key 
            {checkargument}.
                                                           *chk-check-equal*
equal       a (everything)
            Checks, whether {argument} is identical to {checkargument}.
                                                             *chk-check-var*
var         String (either empty or contains comma-delimited variable type
                    names: buffer, window, tabpage, global, vim, any)
            Checks, whether {argument} is a variable name and this this 
            variable exists.
                                                             *chk-check-any*
any         _ (argument is ignored)
            Always true.
                                                             *chk-check-num*
num         (Fractional a) => Either (Either a String, a) (a)
                              (list with one or two elements)
            Checks whether {argument} is a number (depending on a type of 
            first number in {checkargument} it must have a type either Integer 
            or any of Integer and Fload) from first element of {checkargument} 
            (if it is not equal to empty string) to the second element of 
            {checkargument} (if it exists).
            Examples: >
                Check               Argument   Result
                ["num", [0]]        1          True
                ["num", [0]]        -1         False
                ["num", [0]]        1.0        False
                ["num", [0.0]]      1.0        True
                ["num", [0.0]]      1          True
                ["num", ["", 0]]    1          False
                ["num", ["", 0]]    -1         True
                ["num", ["", 0]]    -1.0       False
                ["num", [0, 2]]     0          True
                ["num", [0, 2]]     3          False
                ["num", [0, 2]]     -1         False
                ["num", [0, 2.0]]   1.0        False
                ["num", [0.0, 2.0]] 1.0        True
                ["num", [0.0, 2]]   1.0        True

nums         (see above)                                    *chk-check-nums*
            Just like |chk-check-num|, but before doing a check it runs 
            eval({argument}).
                                                           *chk-check-isreg*
isreg       _ (argument is ignored)
            Check whether {argument} is a correct regular expression.
                                                            *chk-check-file*
file        String
            Test, whether {argument} is a filename, which
            {checkargument}  Meaning ~
                   r         exists and is readable;
                   rw        exists and is writeable;
                   dw        exists, is a directory and is writeable;
                   w         either exists and is writeable or does not
                             exist, but is in directory where we could 
                             write.
                                                             *chk-check-len*
len         Either (Integer, Integer) (Integer) (list with one or two
                                                 integers)
            Checks whether {argument} is a list with length from 
            {checkargument}[0] to {checkargument}[1] (or infinity if it is not 
            present). Use regular expressions to test for string length.
                                                          *chk-check-chklst*
chklst      [ Check ] (list of checks)
            Checks whether {argument} is a list with length equal to length of 
            {checkargument} and every element in {argument} matches Check in 
            the identical position.
                                                          *chk-check-alllst*
alllst      Check
            Checks whether {argument} is a list and every element in 
            {argument} matches {checkargument}.
                                                            *chk-check-dict*
dict        [(Check, Check)] (list of lists of two checks)
            If {argument} is a dictionary then for every key of {argument} if 
            it matches left Check and value does not match right check return 
            False. Also return False if some key matches none of right checks.
                                                             *chk-check-map*
map         ({CheckName}, [ {CheckArgument} ])
            For every {CheckArgument} in list {checkargument}[1] check whether 
            {argument} matches check [{CheckName}, {CheckArgument}].
                                                             *chk-check-not*
not         Check
            Check, whether {argument} does not match {checkargument}.
                                                              *chk-check-or*
or          [ Check ] (list of checks)
            Check, whether {argument} matches any of checks in 
            {checkargument}.
                                                             *chk-check-and*
and         [ Check ] (list of checks)
            Checks, whether {argument} matches all of checks in 
            {checkargument}.

-----------------------------------------------------------------------------
2.3. Models                                                      *chk-model*

{model} is a dictionary with required key "model" and some other keys, which 
depend on "model".

Model     Description ~
                                                          *chk-model-simple*
simple    Required keys: "required" :: [ ArgTrans ] (list of transformations)
          Meaning: there must be exactly len("required") arguments
                   in {arguments}, all must be successfully 
                   transformed by appropriate ArgTrans.
          Examples:
              If we need to check arguments to the |pow()| function:
              pow(Float, Float) -> Float
                  {    "model": "simple",
                    "required": [["or", ["type", type(0.0)],
                                        ["type", type(0)]],
                                 ["or", ["type", type(0.0)],
                                        ["type", type(0)]]] }

                                                        *chk-model-optional*
optional  Required keys: no
          Optional keys: "required" :: [ ArgTrans ] and
                         "optional" :: [(ArgTrans, ArgTrans, a)]
                              (list of lists of three elements: transformation 
                              for present argument, transformation for default 
                              value and default value)
          Meaning: there must be at least len("required") arguments (or 0 if
                   it is not present) and at most len("optional") optional 
                   arguments. If some optional argument is present it is 
                   transformed by first ArgTrans. If it is not present, then 
                   third value in list is transformed using the second 
                   ArgTrans.
          Example:
              If we need to check arguments to the |matchstr()| function:
              matchstr(String, Regex[, UInteger[, UInteger]])
                  {   "model": "optional",
                   "required": [["type", type("")],
                                ["isreg", ""]],
                   "optional": [[["num", [0]], {}, 0],
                                [["num", [0]], {}, 0]] }
                                                        *chk-model-prefixed*
prefixed  Required keys: no
          Optional keys: "required" :: [ ArgTrans ]
                         "optional" :: [(ArgTrans, ArgTrans, a)]
                         "prefrequired" :: {prefix: ArgTrans}
                              (dictionary with values identical to 
                              "required" values)
                         "prefoptional" :: {prefix: (ArgTrans,
                                                     ArgTrans, a)}
                              (dictionary with values identical to 
                              "optional" values)
                         "preflist" :: [ String ] (list of
                                                   strings)
                         "allowtrun" :: Bool
          Meaning:
              Command must look like that:
                   Command [required_arguments]
                         \ [optional_arguments]
                         \ [{prefix} {argument}]
                         \ [{prefixFromPreflist} [arguments]]
              Here [required_arguments] are described in "required" key and 
              are handled just like in |chk-model-simple|; 
              [optional_arguments] are described in "optional" key and are 
              handled just like in |chk-model-optional|, but with one 
              difference: [optional_arguments] must contain none of the keys 
              of "prefrequired" and "prefoptional" dictionaries. Then for all 
              keys from "prefrequired" and "prefoptional" not listed in 
              "preflist" if in the arguments list there is a sequence [{key}, 
              {value}], then extend the last entry in arguments list (it will 
              always be a dictionary) with { {key}: {value} } pair. If some 
              key from "prefrequired" or "prefoptional" is listed in 
              "preflist" then all arguments starting with one equal to this 
              key and ending with one of the keys from "prefrequired" or 
              "prefoptional" are added to the list. Last entry in arguments 
              list will be extended with { {key}: {list} } pair then. Key 
              "allowtrun" denies or allows (default: allow) reducing prefixes. 
              For example, if there are prefixes “columns”, “count” and 
              “print” then if reducing is allowed “columns” may be reduced to 
              “col”, “count” to “cou” and “print” to “p”. Presence of either 
              "optional" or "preflist" keys denies reducing.
              Examples:
                  {"model": "prefixed",
                   "required": [{}],
                   "optional": [[{}, {}, "def"]],
                   "prefrequired": {"for": {}, "in": {}},
                   "prefoptional": {"using": [{}, {}, "defU",
                                    "list": [{}, {}, ["defL"]]},
                   "preflist": ["in", "list"]}

                  Cmdline => Result:
                  required optional for F in I using U list L =>
                            ["required", "optional", {"for": "F",
                                                      "in": ["I"],
                                                      "using": "U",
                                                      "list": ["L"]}]
                  required for F in I using U list L =>
                            ["required", "def", {"for": "F",
                                                 "in": ["I"],
                                                 "using": "U",
                                                 "list": ["L"]}]
                  required four for F in I using U list L =>
                            ["required", "four", {"for": "F",
                                                  "in": ["I"],
                                                  "using": "U",
                                                  "list": ["L"]}]
                  required for F in I1 I2  =>
                            ["required", "def", {"for": "F",
                                                 "in": ["I1", "I2"],
                                                 "using": "defU",
                                                 "list": ["defL"]}]
                  required for F in I1 I2 list L1 L2 =>
                            ["required", "def", {"for": "F",
                                                 "in": ["I1", "I2"],
                                                 "using": "U",
                                                 "list": ["L1", "L2"]}]
                                                         *chk-model-actions*
actions   Required keys: "actions" :: {action: Model}
          Optional keys: "allowtrun" :: Bool
          Meaning: first argument must be one of keys from "actions"
                   dictionary. Other arguments must be valid models. Key 
                   "allowtrun" denies or allows (default: allow) reducing 
                   action names. For example, if there are actions “start”, 
                   “stop” and “restart” then if reducing is allowed “start” 
                   may be reduced to “sta”, “stop” to “sto” and “restart” to 
                   “r”.

------------------------------------------------------------------------------
2.4. Transformations                                             *chk-trans*

Every ArgTrans is either a dictionary or a Check. If it is a Check, then 
argument is not transformed, only checked. If it is a dictionary it may 
contain the following keys:

Key     Value and description ~
check   Check
        Check the argument.
trans   Transformation
        Transform the argument using transformation. Every transformation is 
        a list of two elemnts: name of the transformation and argument. 
        Possible transformations:
        Name    {transargument} ~
        eq      a (any value)
                Return 1 if {argument} is identical to {transargument} and 
                0 otherwise.
        func    Function (a -> b) (function that takes one argument)
                Pass the argument to the function and use the result.
        eval    String (expression)
                Eval the {transargument} and take the result. Inside the 
                expression a:Arg is {argument} and a:Trans is 
                {transargument}.
        earg    _ (argument is ignored)
                Eval the being transformed argument and take the result. Note 
                that {transargument} is still available via a:Trans 
                variable.
        call    [{functionarguments}] (list of function arguments)
                Take the result of call({argument}, {transargument}, {}).
        pipe    [ Transformation ] (list of transformations)
                Take the result of n'th transformation and transform it using 
                the (n+1)'th transformation.
transchk  Check
        Check the result of transformation.
skip    _ (value is ignored)
        Do not add {argument} to the arguments list.

vim: ft=help:tw=78
